
NIRSV001.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000046c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  0000046c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000049c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000102c  00000000  00000000  000005a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c07  00000000  00000000  000015d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000772  00000000  00000000  000021d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  0000294c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000682  00000000  00000000  00002b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000393  00000000  00000000  000031ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000355d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 85 00 	jmp	0x10a	; 0x10a <__vector_2>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_16>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	e8 ef       	ldi	r30, 0xF8	; 248
  e0:	f3 e0       	ldi	r31, 0x03	; 3
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	a0 30       	cpi	r26, 0x00	; 0
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	a0 e0       	ldi	r26, 0x00	; 0
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	a3 30       	cpi	r26, 0x03	; 3
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 0e 01 	call	0x21c	; 0x21c <main>
 102:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <__vector_2>:
volatile uint8_t vect_cnt;
volatile uint16_t timer_ms_counter=0;
volatile uint16_t  count=0;
volatile uint8_t ch_number=1;

ISR(INT1_vect){
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	2f 93       	push	r18
 116:	3f 93       	push	r19
 118:	4f 93       	push	r20
 11a:	5f 93       	push	r21
 11c:	6f 93       	push	r22
 11e:	7f 93       	push	r23
 120:	8f 93       	push	r24
 122:	9f 93       	push	r25
 124:	af 93       	push	r26
 126:	bf 93       	push	r27
 128:	cf 93       	push	r28
 12a:	ef 93       	push	r30
 12c:	ff 93       	push	r31
	uint8_t portnr = ((PIND>>1)&0x01);			//Bitmask: Checking a bit PD1 for choice channel.	
 12e:	89 b1       	in	r24, 0x09	; 9
 130:	81 fb       	bst	r24, 1
 132:	cc 27       	eor	r28, r28
 134:	c0 f9       	bld	r28, 0
	//LED_toggle(5);
	switch(vect_cnt){
 136:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <vect_cnt>
 13a:	88 23       	and	r24, r24
 13c:	19 f0       	breq	.+6      	; 0x144 <__vector_2+0x3a>
 13e:	81 30       	cpi	r24, 0x01	; 1
 140:	91 f0       	breq	.+36     	; 0x166 <__vector_2+0x5c>
 142:	20 c0       	rjmp	.+64     	; 0x184 <__vector_2+0x7a>
		case 0:{
				disable_MUX();
 144:	0e 94 a9 01 	call	0x352	; 0x352 <disable_MUX>
				timer_ms_counter =0;
 148:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 14c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
				if (portnr==0)
 150:	c1 11       	cpse	r28, r1
 152:	05 c0       	rjmp	.+10     	; 0x15e <__vector_2+0x54>
				{
					set_MUX(1);			// CH1 LED_IR 850nm
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	0e 94 ad 01 	call	0x35a	; 0x35a <set_MUX>
					enable_MUX();
 15a:	0e 94 a5 01 	call	0x34a	; 0x34a <enable_MUX>
				}
				vect_cnt=1;
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <vect_cnt>
				break;
 164:	0f c0       	rjmp	.+30     	; 0x184 <__vector_2+0x7a>
		}
		case 1:{
				disable_MUX();
 166:	0e 94 a9 01 	call	0x352	; 0x352 <disable_MUX>
				timer_ms_counter =0;
 16a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 16e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
				if (portnr==1)
 172:	c1 30       	cpi	r28, 0x01	; 1
 174:	29 f4       	brne	.+10     	; 0x180 <__vector_2+0x76>
				{
					set_MUX(2);			// CH2 LED_RED 750nm
 176:	82 e0       	ldi	r24, 0x02	; 2
 178:	0e 94 ad 01 	call	0x35a	; 0x35a <set_MUX>
					enable_MUX();
 17c:	0e 94 a5 01 	call	0x34a	; 0x34a <enable_MUX>
				}
				vect_cnt =0;
 180:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <vect_cnt>
				break;
		}
	}
}
 184:	ff 91       	pop	r31
 186:	ef 91       	pop	r30
 188:	cf 91       	pop	r28
 18a:	bf 91       	pop	r27
 18c:	af 91       	pop	r26
 18e:	9f 91       	pop	r25
 190:	8f 91       	pop	r24
 192:	7f 91       	pop	r23
 194:	6f 91       	pop	r22
 196:	5f 91       	pop	r21
 198:	4f 91       	pop	r20
 19a:	3f 91       	pop	r19
 19c:	2f 91       	pop	r18
 19e:	0f 90       	pop	r0
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	0f 90       	pop	r0
 1a4:	1f 90       	pop	r1
 1a6:	18 95       	reti

000001a8 <__vector_16>:
ISR(TIMER0_COMPA_vect){
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
 1b2:	2f 93       	push	r18
 1b4:	3f 93       	push	r19
 1b6:	4f 93       	push	r20
 1b8:	5f 93       	push	r21
 1ba:	6f 93       	push	r22
 1bc:	7f 93       	push	r23
 1be:	8f 93       	push	r24
 1c0:	9f 93       	push	r25
 1c2:	af 93       	push	r26
 1c4:	bf 93       	push	r27
 1c6:	ef 93       	push	r30
 1c8:	ff 93       	push	r31
	
	if(timer_ms_counter>=40){
 1ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ce:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1d2:	88 97       	sbiw	r24, 0x28	; 40
 1d4:	48 f0       	brcs	.+18     	; 0x1e8 <__vector_16+0x40>
		timer_ms_counter=0;
 1d6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1da:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		vect_cnt=0;
 1de:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <vect_cnt>
		disable_MUX();
 1e2:	0e 94 a9 01 	call	0x352	; 0x352 <disable_MUX>
 1e6:	09 c0       	rjmp	.+18     	; 0x1fa <__vector_16+0x52>
		//LED_toggle(4);
	}
	else
	timer_ms_counter++;
 1e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ec:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1f0:	01 96       	adiw	r24, 0x01	; 1
 1f2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1f6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 1fa:	ff 91       	pop	r31
 1fc:	ef 91       	pop	r30
 1fe:	bf 91       	pop	r27
 200:	af 91       	pop	r26
 202:	9f 91       	pop	r25
 204:	8f 91       	pop	r24
 206:	7f 91       	pop	r23
 208:	6f 91       	pop	r22
 20a:	5f 91       	pop	r21
 20c:	4f 91       	pop	r20
 20e:	3f 91       	pop	r19
 210:	2f 91       	pop	r18
 212:	0f 90       	pop	r0
 214:	0f be       	out	0x3f, r0	; 63
 216:	0f 90       	pop	r0
 218:	1f 90       	pop	r1
 21a:	18 95       	reti

0000021c <main>:

int main(void)
{
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	1f 92       	push	r1
 222:	cd b7       	in	r28, 0x3d	; 61
 224:	de b7       	in	r29, 0x3e	; 62
	DDRA= 0b00111111;						// MUX Control Signal (PA0-PA3, Output), LED Signal (PA4-PA5, Output), ADC7 Signal Monitor (PA7, Input)
 226:	8f e3       	ldi	r24, 0x3F	; 63
 228:	81 b9       	out	0x01, r24	; 1
	DDRC= 0xFF;								// DAC Control Signal (Output, 8Bit word)
 22a:	8f ef       	ldi	r24, 0xFF	; 255
 22c:	87 b9       	out	0x07, r24	; 7
	DDRD= 0b11000000;						// Control Signal from Mainboard (PD3-1), PWM Lock-In-Signal (PD7, Output)
 22e:	80 ec       	ldi	r24, 0xC0	; 192
 230:	8a b9       	out	0x0a, r24	; 10
	uint16_t Gain_controller=0x4000;	// 0b0100 0000 Gain:1
	uint16_t Channel_controller=0x4101; // 0b0100 0001 Select CH1
	uint8_t shutdown= 0x00;
	
	//Initialize External Control Interrupt INT1on PD3
	EICRA |= (1<<ISC10) | (1<<ISC11);			// Rising edges of INT1 generate an IRequest
 232:	e9 e6       	ldi	r30, 0x69	; 105
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	80 81       	ld	r24, Z
 238:	8c 60       	ori	r24, 0x0C	; 12
 23a:	80 83       	st	Z, r24
	EIMSK |= (1<<INT1);							// Enable INT1
 23c:	8d b3       	in	r24, 0x1d	; 29
 23e:	82 60       	ori	r24, 0x02	; 2
 240:	8d bb       	out	0x1d, r24	; 29
	
	PWM_init();
 242:	0e 94 c7 01 	call	0x38e	; 0x38e <PWM_init>
	Timer_init();
 246:	0e 94 d6 01 	call	0x3ac	; 0x3ac <Timer_init>
	SPI_MasterInit();
 24a:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <SPI_MasterInit>
	set_DAC_level(1,&current_DAC_level);
 24e:	be 01       	movw	r22, r28
 250:	6f 5f       	subi	r22, 0xFF	; 255
 252:	7f 4f       	sbci	r23, 0xFF	; 255
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	0e 94 63 01 	call	0x2c6	; 0x2c6 <set_DAC_level>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25a:	2f e3       	ldi	r18, 0x3F	; 63
 25c:	8d e0       	ldi	r24, 0x0D	; 13
 25e:	93 e0       	ldi	r25, 0x03	; 3
 260:	21 50       	subi	r18, 0x01	; 1
 262:	80 40       	sbci	r24, 0x00	; 0
 264:	90 40       	sbci	r25, 0x00	; 0
 266:	e1 f7       	brne	.-8      	; 0x260 <main+0x44>
 268:	00 c0       	rjmp	.+0      	; 0x26a <main+0x4e>
 26a:	00 00       	nop
	_delay_ms(1000);
	
	vect_cnt=0;
 26c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <vect_cnt>
	timer_ms_counter=0;
 270:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 274:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 278:	89 ef       	ldi	r24, 0xF9	; 249
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <main+0x60>
 280:	00 c0       	rjmp	.+0      	; 0x282 <main+0x66>
 282:	00 00       	nop
	_delay_ms(1);
	disable_MUX();
 284:	0e 94 a9 01 	call	0x352	; 0x352 <disable_MUX>
	sei();
 288:	78 94       	sei
	set_MUX(1);
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	0e 94 ad 01 	call	0x35a	; 0x35a <set_MUX>
	enable_MUX(1);
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	0e 94 a5 01 	call	0x34a	; 0x34a <enable_MUX>
	SPI_MasterTransmit(Gain_controller);
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	90 e4       	ldi	r25, 0x40	; 64
 29c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <SPI_MasterTransmit>
	SPI_MasterTransmit(Channel_controller);
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	91 e4       	ldi	r25, 0x41	; 65
 2a4:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <SPI_MasterTransmit>
	while (1)
	{		
		// reset?
		if (PIND & 0x10){
 2a8:	4c 9b       	sbis	0x09, 4	; 9
 2aa:	fe cf       	rjmp	.-4      	; 0x2a8 <main+0x8c>
			vect_cnt =0;
 2ac:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <vect_cnt>
			disable_MUX();
 2b0:	0e 94 a9 01 	call	0x352	; 0x352 <disable_MUX>
 2b4:	f9 cf       	rjmp	.-14     	; 0x2a8 <main+0x8c>

000002b6 <LED1_on>:
void enable_LOCK_PWM(){
	TCCR2A |= (1<<COM2A0);				// Phase correct PWM Mode, Toggle OC1A on Compare Match
}

void disable_LOCK_PWM(){
	TCCR2A &= ~(1<<COM2A0);				// Non PWM Mode, Normal port operation, OC1A disconnected
 2b6:	82 b1       	in	r24, 0x02	; 2
 2b8:	80 61       	ori	r24, 0x10	; 16
 2ba:	82 b9       	out	0x02, r24	; 2
 2bc:	08 95       	ret

000002be <LED2_on>:
 2be:	82 b1       	in	r24, 0x02	; 2
 2c0:	80 62       	ori	r24, 0x20	; 32
 2c2:	82 b9       	out	0x02, r24	; 2
 2c4:	08 95       	ret

000002c6 <set_DAC_level>:
 2c6:	82 30       	cpi	r24, 0x02	; 2
 2c8:	71 f1       	breq	.+92     	; 0x326 <set_DAC_level+0x60>
 2ca:	28 f4       	brcc	.+10     	; 0x2d6 <set_DAC_level+0x10>
 2cc:	88 23       	and	r24, r24
 2ce:	41 f0       	breq	.+16     	; 0x2e0 <set_DAC_level+0x1a>
 2d0:	81 30       	cpi	r24, 0x01	; 1
 2d2:	21 f1       	breq	.+72     	; 0x31c <set_DAC_level+0x56>
 2d4:	08 95       	ret
 2d6:	83 30       	cpi	r24, 0x03	; 3
 2d8:	61 f1       	breq	.+88     	; 0x332 <set_DAC_level+0x6c>
 2da:	84 30       	cpi	r24, 0x04	; 4
 2dc:	81 f1       	breq	.+96     	; 0x33e <set_DAC_level+0x78>
 2de:	08 95       	ret
 2e0:	fb 01       	movw	r30, r22
 2e2:	80 81       	ld	r24, Z
 2e4:	84 30       	cpi	r24, 0x04	; 4
 2e6:	21 f4       	brne	.+8      	; 0x2f0 <set_DAC_level+0x2a>
 2e8:	80 e8       	ldi	r24, 0x80	; 128
 2ea:	88 b9       	out	0x08, r24	; 8
 2ec:	83 e0       	ldi	r24, 0x03	; 3
 2ee:	80 83       	st	Z, r24
 2f0:	fb 01       	movw	r30, r22
 2f2:	80 81       	ld	r24, Z
 2f4:	83 30       	cpi	r24, 0x03	; 3
 2f6:	21 f4       	brne	.+8      	; 0x300 <set_DAC_level+0x3a>
 2f8:	8f e7       	ldi	r24, 0x7F	; 127
 2fa:	88 b9       	out	0x08, r24	; 8
 2fc:	82 e0       	ldi	r24, 0x02	; 2
 2fe:	80 83       	st	Z, r24
 300:	fb 01       	movw	r30, r22
 302:	80 81       	ld	r24, Z
 304:	82 30       	cpi	r24, 0x02	; 2
 306:	19 f4       	brne	.+6      	; 0x30e <set_DAC_level+0x48>
 308:	18 b8       	out	0x08, r1	; 8
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	80 83       	st	Z, r24
 30e:	fb 01       	movw	r30, r22
 310:	80 81       	ld	r24, Z
 312:	81 30       	cpi	r24, 0x01	; 1
 314:	c9 f4       	brne	.+50     	; 0x348 <set_DAC_level+0x82>
 316:	18 b8       	out	0x08, r1	; 8
 318:	80 83       	st	Z, r24
 31a:	08 95       	ret
 31c:	18 b8       	out	0x08, r1	; 8
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	fb 01       	movw	r30, r22
 322:	80 83       	st	Z, r24
 324:	08 95       	ret
 326:	8f e7       	ldi	r24, 0x7F	; 127
 328:	88 b9       	out	0x08, r24	; 8
 32a:	82 e0       	ldi	r24, 0x02	; 2
 32c:	fb 01       	movw	r30, r22
 32e:	80 83       	st	Z, r24
 330:	08 95       	ret
 332:	80 e8       	ldi	r24, 0x80	; 128
 334:	88 b9       	out	0x08, r24	; 8
 336:	83 e0       	ldi	r24, 0x03	; 3
 338:	fb 01       	movw	r30, r22
 33a:	80 83       	st	Z, r24
 33c:	08 95       	ret
 33e:	8f ef       	ldi	r24, 0xFF	; 255
 340:	88 b9       	out	0x08, r24	; 8
 342:	84 e0       	ldi	r24, 0x04	; 4
 344:	fb 01       	movw	r30, r22
 346:	80 83       	st	Z, r24
 348:	08 95       	ret

0000034a <enable_MUX>:
 34a:	82 b1       	in	r24, 0x02	; 2
 34c:	8e 7f       	andi	r24, 0xFE	; 254
 34e:	82 b9       	out	0x02, r24	; 2
 350:	08 95       	ret

00000352 <disable_MUX>:
 352:	82 b1       	in	r24, 0x02	; 2
 354:	81 60       	ori	r24, 0x01	; 1
 356:	82 b9       	out	0x02, r24	; 2
 358:	08 95       	ret

0000035a <set_MUX>:
 35a:	81 30       	cpi	r24, 0x01	; 1
 35c:	19 f0       	breq	.+6      	; 0x364 <set_MUX+0xa>
 35e:	82 30       	cpi	r24, 0x02	; 2
 360:	51 f0       	breq	.+20     	; 0x376 <set_MUX+0x1c>
 362:	08 95       	ret
 364:	82 b1       	in	r24, 0x02	; 2
 366:	89 7f       	andi	r24, 0xF9	; 249
 368:	82 b9       	out	0x02, r24	; 2
 36a:	82 b1       	in	r24, 0x02	; 2
 36c:	88 60       	ori	r24, 0x08	; 8
 36e:	82 b9       	out	0x02, r24	; 2
 370:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LED1_on>
 374:	08 95       	ret
 376:	82 b1       	in	r24, 0x02	; 2
 378:	85 7f       	andi	r24, 0xF5	; 245
 37a:	82 b9       	out	0x02, r24	; 2
 37c:	82 b1       	in	r24, 0x02	; 2
 37e:	84 60       	ori	r24, 0x04	; 4
 380:	82 b9       	out	0x02, r24	; 2
 382:	0e 94 5f 01 	call	0x2be	; 0x2be <LED2_on>
 386:	08 95       	ret

00000388 <set_LOCK_PWM>:
}

void set_LOCK_PWM(uint8_t pwm_val){
	OCR2A = pwm_val;
 388:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 38c:	08 95       	ret

0000038e <PWM_init>:
	}
}
/***PWM FUNCS***/
void PWM_init(){
	//Initialize Lock-In-PWM-Signal
	PRR0 &= ~(1<<PRTIM2);				// Power Reduction Register: Timer2 Enable
 38e:	e4 e6       	ldi	r30, 0x64	; 100
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	80 81       	ld	r24, Z
 394:	8f 7b       	andi	r24, 0xBF	; 191
 396:	80 83       	st	Z, r24
	TCCR2A=(1<<COM2A0) | (1<< WGM22);	// Phase Correct Mode; COM2A0=1 / WGM22:1 Toggle on Compare Match
 398:	88 e4       	ldi	r24, 0x48	; 72
 39a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B=(1<<CS21)| (1<<WGM22);		// 1/8 prescaling,
 39e:	8a e0       	ldi	r24, 0x0A	; 10
 3a0:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	set_LOCK_PWM(96);					// PWM: 50 Hz, 50% Duty Cycle
 3a4:	80 e6       	ldi	r24, 0x60	; 96
 3a6:	0e 94 c4 01 	call	0x388	; 0x388 <set_LOCK_PWM>
 3aa:	08 95       	ret

000003ac <Timer_init>:
void set_LOCK_PWM(uint8_t pwm_val){
	OCR2A = pwm_val;
}
/***TIMER FUNCS***/
void Timer_init() {
	OCR0A = 6;							// Output Compare Match with prescaler 1/1: Every ~10ms
 3ac:	86 e0       	ldi	r24, 0x06	; 6
 3ae:	87 bd       	out	0x27, r24	; 39
	TCCR0A |= (1<<WGM01);				// WGM02:0 WGM01:1 WGM00:0 Clear Timer on Compare match (CTC), Mode 2
 3b0:	84 b5       	in	r24, 0x24	; 36
 3b2:	82 60       	ori	r24, 0x02	; 2
 3b4:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS00);				// 1/1 Prescaler
 3b6:	85 b5       	in	r24, 0x25	; 37
 3b8:	81 60       	ori	r24, 0x01	; 1
 3ba:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1<<OCIE0A);				// Timer/Counter0 Output Compare Interrupt Request
 3bc:	ee e6       	ldi	r30, 0x6E	; 110
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	80 81       	ld	r24, Z
 3c2:	82 60       	ori	r24, 0x02	; 2
 3c4:	80 83       	st	Z, r24
 3c6:	08 95       	ret

000003c8 <SPI_MasterInit>:
}

void SPI_MasterInit(void)
{
	/* Set MOSI and SCK output, all others input */
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_SS);
 3c8:	80 eb       	ldi	r24, 0xB0	; 176
 3ca:	84 b9       	out	0x04, r24	; 4
	PORTB|=(1<<DD_SS);
 3cc:	85 b1       	in	r24, 0x05	; 5
 3ce:	80 61       	ori	r24, 0x10	; 16
 3d0:	85 b9       	out	0x05, r24	; 5
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR0 = (1<<SPE)|(1<<MSTR)|(1<<SPR0)|(1<<CPOL);
 3d2:	89 e5       	ldi	r24, 0x59	; 89
 3d4:	8c bd       	out	0x2c, r24	; 44
 3d6:	08 95       	ret

000003d8 <SPI_MasterTransmit>:

}
void SPI_MasterTransmit(uint16_t u16Data)
{
	PORTB &=~(1<<4);
 3d8:	95 b1       	in	r25, 0x05	; 5
 3da:	9f 7e       	andi	r25, 0xEF	; 239
 3dc:	95 b9       	out	0x05, r25	; 5
 3de:	ef e4       	ldi	r30, 0x4F	; 79
 3e0:	f3 ec       	ldi	r31, 0xC3	; 195
 3e2:	31 97       	sbiw	r30, 0x01	; 1
 3e4:	f1 f7       	brne	.-4      	; 0x3e2 <SPI_MasterTransmit+0xa>
 3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <SPI_MasterTransmit+0x10>
 3e8:	00 00       	nop
	_delay_ms(200);
	/* Start transmission */
	SPDR0 = u16Data;
 3ea:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	while(!(SPSR0 & (1<<SPIF)));
 3ec:	0d b4       	in	r0, 0x2d	; 45
 3ee:	07 fe       	sbrs	r0, 7
 3f0:	fd cf       	rjmp	.-6      	; 0x3ec <SPI_MasterTransmit+0x14>
	
}
 3f2:	08 95       	ret

000003f4 <_exit>:
 3f4:	f8 94       	cli

000003f6 <__stop_program>:
 3f6:	ff cf       	rjmp	.-2      	; 0x3f6 <__stop_program>
