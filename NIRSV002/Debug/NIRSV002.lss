
NIRSV002.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000236  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000002aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c10  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008df  00000000  00000000  00000ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005f4  00000000  00000000  000018d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00001ec8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000056a  00000000  00000000  00002048  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ad  00000000  00000000  000025b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000275f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_2>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_16>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e6 e3       	ldi	r30, 0x36	; 54
  90:	f2 e0       	ldi	r31, 0x02	; 2
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a0 30       	cpi	r26, 0x00	; 0
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a0 e0       	ldi	r26, 0x00	; 0
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a3 30       	cpi	r26, 0x03	; 3
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  b2:	0c 94 19 01 	jmp	0x232	; 0x232 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <__vector_2>:
volatile uint16_t timer_ms_counter=0;
volatile uint16_t  count=0;
volatile uint8_t ch_number=1;


ISR(INT1_vect){
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
			vect_cnt =0;
			break;
		}
		
	}*/
}
  c4:	0f 90       	pop	r0
  c6:	0f be       	out	0x3f, r0	; 63
  c8:	0f 90       	pop	r0
  ca:	1f 90       	pop	r1
  cc:	18 95       	reti

000000ce <__vector_16>:

ISR(TIMER0_COMPA_vect){
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
		//disable_MUX();
		LED_toggle(1);
	}
	else
	timer_ms_counter++;*/
	}
  d8:	0f 90       	pop	r0
  da:	0f be       	out	0x3f, r0	; 63
  dc:	0f 90       	pop	r0
  de:	1f 90       	pop	r1
  e0:	18 95       	reti

000000e2 <main>:
int main(void)
{
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	1f 92       	push	r1
  e8:	cd b7       	in	r28, 0x3d	; 61
  ea:	de b7       	in	r29, 0x3e	; 62
	uint8_t  current_DAC_level;
	uint16_t Gain_controller=0x4007;		// Instruction Byte: 0b0100 0000 / Gain:1	: 0b0100 0000
	uint16_t Channel_controller=0x4101;		// Instruction Byte: 0b0100 0000 / Channel-1: 0b0100 0001
	//uint16_t shutdown= 0x1000;

	DDRA= 0b00111111;						// MUX Control Signal (PA0-PA3, Output), LED Signal (PA4-PA5, Output), ADC7 Signal Monitor (PA7, Input)
  ec:	8f e3       	ldi	r24, 0x3F	; 63
  ee:	81 b9       	out	0x01, r24	; 1
	DDRC= 0xFF;								// DAC Control Signal (Output, 8Bit word)
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	87 b9       	out	0x07, r24	; 7
	DDRD= 0b11000000;						// Control Signal from Mainboard (PD3-1), PWM Lock-In-Signal (PD7, Output)
  f4:	80 ec       	ldi	r24, 0xC0	; 192
  f6:	8a b9       	out	0x0a, r24	; 10
	
	//Initialize External Control Interrupt INT1on PD3
	EICRA |= (1<<ISC10) | (1<<ISC11);			// Rising edges of INT1 generate an IRequest
  f8:	e9 e6       	ldi	r30, 0x69	; 105
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	8c 60       	ori	r24, 0x0C	; 12
 100:	80 83       	st	Z, r24
	EIMSK |= (1<<INT1);							// Enable INT1
 102:	8d b3       	in	r24, 0x1d	; 29
 104:	82 60       	ori	r24, 0x02	; 2
 106:	8d bb       	out	0x1d, r24	; 29
	
	//PWM_init();   
	//Timer_init();
	SPI_MasterInit();
 108:	0e 94 0a 01 	call	0x214	; 0x214 <SPI_MasterInit>
	set_DAC_level(1,&current_DAC_level);
 10c:	be 01       	movw	r22, r28
 10e:	6f 5f       	subi	r22, 0xFF	; 255
 110:	7f 4f       	sbci	r23, 0xFF	; 255
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	0e 94 c4 00 	call	0x188	; 0x188 <set_DAC_level>
	vect_cnt=0;
 118:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <vect_cnt>
	timer_ms_counter=0;
 11c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 120:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	2f ef       	ldi	r18, 0xFF	; 255
 126:	88 e0       	ldi	r24, 0x08	; 8
 128:	9d e3       	ldi	r25, 0x3D	; 61
 12a:	21 50       	subi	r18, 0x01	; 1
 12c:	80 40       	sbci	r24, 0x00	; 0
 12e:	90 40       	sbci	r25, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <main+0x48>
 132:	00 c0       	rjmp	.+0      	; 0x134 <main+0x52>
 134:	00 00       	nop
	_delay_ms(1000);
	disable_MUX();
 136:	0e 94 06 01 	call	0x20c	; 0x20c <disable_MUX>
	sei();
 13a:	78 94       	sei
 13c:	8f e0       	ldi	r24, 0x0F	; 15
 13e:	97 e2       	ldi	r25, 0x27	; 39
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <main+0x5e>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0x64>
 146:	00 00       	nop
	_delay_ms(2);
	
	
    while (1) 
    {
		SPI_MasterTransmit(Gain_controller);
 148:	87 e0       	ldi	r24, 0x07	; 7
 14a:	90 e4       	ldi	r25, 0x40	; 64
 14c:	0e 94 14 01 	call	0x228	; 0x228 <SPI_MasterTransmit>
		SPI_MasterTransmit(Channel_controller);
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	91 e4       	ldi	r25, 0x41	; 65
 154:	0e 94 14 01 	call	0x228	; 0x228 <SPI_MasterTransmit>
		LED_toggle(4);
 158:	84 e0       	ldi	r24, 0x04	; 4
 15a:	0e 94 b9 00 	call	0x172	; 0x172 <LED_toggle>
 15e:	9f ef       	ldi	r25, 0xFF	; 255
 160:	28 e0       	ldi	r18, 0x08	; 8
 162:	8d e3       	ldi	r24, 0x3D	; 61
 164:	91 50       	subi	r25, 0x01	; 1
 166:	20 40       	sbci	r18, 0x00	; 0
 168:	80 40       	sbci	r24, 0x00	; 0
 16a:	e1 f7       	brne	.-8      	; 0x164 <main+0x82>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <main+0x8c>
 16e:	00 00       	nop
 170:	eb cf       	rjmp	.-42     	; 0x148 <main+0x66>

00000172 <LED_toggle>:
/***TIMER FUNCS***/
void Timer_init() {
	OCR0A = 6;							// Output Compare Match with prescaler 1/1: Every ~10ms
	TCCR0A |= (1<<WGM01);				// WGM02:0 WGM01:1 WGM00:0 Clear Timer on Compare match (CTC), Mode 2
	TCCR0B |= (1<<CS00);				// 1/1 Prescaler
	TIMSK0 |= (1<<OCIE0A);				// Timer/Counter0 Output Compare Interrupt Request
 172:	92 b1       	in	r25, 0x02	; 2
 174:	21 e0       	ldi	r18, 0x01	; 1
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	02 c0       	rjmp	.+4      	; 0x17e <LED_toggle+0xc>
 17a:	22 0f       	add	r18, r18
 17c:	33 1f       	adc	r19, r19
 17e:	8a 95       	dec	r24
 180:	e2 f7       	brpl	.-8      	; 0x17a <LED_toggle+0x8>
 182:	29 27       	eor	r18, r25
 184:	22 b9       	out	0x02, r18	; 2
 186:	08 95       	ret

00000188 <set_DAC_level>:
 188:	82 30       	cpi	r24, 0x02	; 2
 18a:	71 f1       	breq	.+92     	; 0x1e8 <set_DAC_level+0x60>
 18c:	28 f4       	brcc	.+10     	; 0x198 <set_DAC_level+0x10>
 18e:	88 23       	and	r24, r24
 190:	41 f0       	breq	.+16     	; 0x1a2 <set_DAC_level+0x1a>
 192:	81 30       	cpi	r24, 0x01	; 1
 194:	21 f1       	breq	.+72     	; 0x1de <set_DAC_level+0x56>
 196:	08 95       	ret
 198:	83 30       	cpi	r24, 0x03	; 3
 19a:	61 f1       	breq	.+88     	; 0x1f4 <set_DAC_level+0x6c>
 19c:	84 30       	cpi	r24, 0x04	; 4
 19e:	81 f1       	breq	.+96     	; 0x200 <set_DAC_level+0x78>
 1a0:	08 95       	ret
 1a2:	fb 01       	movw	r30, r22
 1a4:	80 81       	ld	r24, Z
 1a6:	84 30       	cpi	r24, 0x04	; 4
 1a8:	21 f4       	brne	.+8      	; 0x1b2 <set_DAC_level+0x2a>
 1aa:	80 e8       	ldi	r24, 0x80	; 128
 1ac:	88 b9       	out	0x08, r24	; 8
 1ae:	83 e0       	ldi	r24, 0x03	; 3
 1b0:	80 83       	st	Z, r24
 1b2:	fb 01       	movw	r30, r22
 1b4:	80 81       	ld	r24, Z
 1b6:	83 30       	cpi	r24, 0x03	; 3
 1b8:	21 f4       	brne	.+8      	; 0x1c2 <set_DAC_level+0x3a>
 1ba:	8f e7       	ldi	r24, 0x7F	; 127
 1bc:	88 b9       	out	0x08, r24	; 8
 1be:	82 e0       	ldi	r24, 0x02	; 2
 1c0:	80 83       	st	Z, r24
 1c2:	fb 01       	movw	r30, r22
 1c4:	80 81       	ld	r24, Z
 1c6:	82 30       	cpi	r24, 0x02	; 2
 1c8:	19 f4       	brne	.+6      	; 0x1d0 <set_DAC_level+0x48>
 1ca:	18 b8       	out	0x08, r1	; 8
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	80 83       	st	Z, r24
 1d0:	fb 01       	movw	r30, r22
 1d2:	80 81       	ld	r24, Z
 1d4:	81 30       	cpi	r24, 0x01	; 1
 1d6:	c9 f4       	brne	.+50     	; 0x20a <set_DAC_level+0x82>
 1d8:	18 b8       	out	0x08, r1	; 8
 1da:	80 83       	st	Z, r24
 1dc:	08 95       	ret
 1de:	18 b8       	out	0x08, r1	; 8
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	fb 01       	movw	r30, r22
 1e4:	80 83       	st	Z, r24
 1e6:	08 95       	ret
 1e8:	8f e7       	ldi	r24, 0x7F	; 127
 1ea:	88 b9       	out	0x08, r24	; 8
 1ec:	82 e0       	ldi	r24, 0x02	; 2
 1ee:	fb 01       	movw	r30, r22
 1f0:	80 83       	st	Z, r24
 1f2:	08 95       	ret
 1f4:	80 e8       	ldi	r24, 0x80	; 128
 1f6:	88 b9       	out	0x08, r24	; 8
 1f8:	83 e0       	ldi	r24, 0x03	; 3
 1fa:	fb 01       	movw	r30, r22
 1fc:	80 83       	st	Z, r24
 1fe:	08 95       	ret
 200:	8f ef       	ldi	r24, 0xFF	; 255
 202:	88 b9       	out	0x08, r24	; 8
 204:	84 e0       	ldi	r24, 0x04	; 4
 206:	fb 01       	movw	r30, r22
 208:	80 83       	st	Z, r24
 20a:	08 95       	ret

0000020c <disable_MUX>:
 20c:	82 b1       	in	r24, 0x02	; 2
 20e:	81 60       	ori	r24, 0x01	; 1
 210:	82 b9       	out	0x02, r24	; 2
 212:	08 95       	ret

00000214 <SPI_MasterInit>:
}

void SPI_MasterInit(void)
{	
	// SPI Clock: 20MHz/8 = 2.5MHz
	PRR0 &= ~(1<<PRSPI);							// Enable SPI Module (Power Reduction SPI Flag = 0)
 214:	e4 e6       	ldi	r30, 0x64	; 100
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	8b 7f       	andi	r24, 0xFB	; 251
 21c:	80 83       	st	Z, r24
	DDRB=(1<<DD_SS) |(1<<DD_SCK)|(1<<DD_MOSI);
 21e:	80 eb       	ldi	r24, 0xB0	; 176
 220:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<MSTR)|(1<<SPR0)|(1<<SPE);			// Config SPI Control Register: Define as Master, transmit MSB first (DORD:0), fosc/8; SPI Enable
 222:	81 e5       	ldi	r24, 0x51	; 81
 224:	8c bd       	out	0x2c, r24	; 44
 226:	08 95       	ret

00000228 <SPI_MasterTransmit>:
}
void SPI_MasterTransmit(uint16_t u16Data)
{
	//PORTB&=~(1<<DD_SS);
	/* Start transmission */
	SPDR = u16Data;
 228:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
 22a:	0d b4       	in	r0, 0x2d	; 45
 22c:	07 fe       	sbrs	r0, 7
 22e:	fd cf       	rjmp	.-6      	; 0x22a <SPI_MasterTransmit+0x2>
}
 230:	08 95       	ret

00000232 <_exit>:
 232:	f8 94       	cli

00000234 <__stop_program>:
 234:	ff cf       	rjmp	.-2      	; 0x234 <__stop_program>
